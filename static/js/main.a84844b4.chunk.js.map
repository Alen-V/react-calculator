{"version":3,"sources":["components/Display/Display.jsx","components/Keypad/Keypad.jsx","components/Calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["Display","props","display","secondaryDisplay","className","Keypad","inputNum","inputFunc","num","number","map","index","onClick","isNaN","func","key","keypadNum","Calculator","state","inputState","firstInput","operation","input","toString","includes","setState","secondInput","doMath","first","second","result","slice","contains","undefined","target","pattern","value","forEach","word","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a84844b4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Display = (props) => {\r\n    const { display, secondaryDisplay } = props\r\n    const displayContainer = (\r\n        <div className=\"display-container\">\r\n            <span>{!secondaryDisplay ? null : secondaryDisplay}</span>\r\n            <span>{display !== 0 ? display : null}</span>\r\n        </div>\r\n    )\r\n    return displayContainer\r\n}\r\n\r\nexport default Display","import React from 'react'\r\n\r\nconst Keypad = (props) => {\r\n    const { inputNum, inputFunc } = props\r\n    let keypadArray = [['AC', '+/-', '%', '/'], ['7', '8', '9', 'x'], ['4', '5', '6', '+'], ['1', '2', '3', '-'], ['0', '.', 'C', '=']]\r\n    const printKey = (key) => {\r\n        if( inputNum ) {\r\n            props.inputNum(key)\r\n        }\r\n    }\r\n    const doFunc = (func) => {\r\n        if ( inputFunc ) {\r\n            props.inputFunc(func)\r\n        }\r\n    }\r\n    let num = (number) => {\r\n        let keys = number.map((num, index) => (\r\n            <div className={\"keypad-num\" + \" \" + \"key\" + index} key={index}>\r\n                <span onClick={ !isNaN(num) || num === '.' ? () => printKey(num) : () => doFunc(num)}>{num}</span>\r\n            </div>\r\n        ))\r\n        return keys\r\n    }\r\n    let keypadNum = keypadArray.map((number, index) => (\r\n        <div className={\"keypad-row\" + \" \" + \"row\" + index} key={index}>\r\n            {num(number)}\r\n        </div>\r\n    ))\r\n    const keypad = (\r\n        <div className=\"keypad-container\">\r\n            <div className=\"numpad-container\">\r\n            {keypadNum}\r\n            </div>\r\n        </div>\r\n    )\r\n    return keypad\r\n}\r\n\r\nexport default Keypad","import React from 'react'\r\nimport './calculator.css'\r\nimport Display from './Display/Display.jsx'\r\nimport Keypad from './Keypad/Keypad.jsx'\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: undefined,\r\n            secondaryDisplay: undefined,\r\n            inputNum: 0,\r\n            firstInput: 0,\r\n            secondInput: 0,\r\n            operation: '',\r\n            inputState: false\r\n        }\r\n    }\r\n    inputNum = (num) => {\r\n        let { display, inputState, firstInput, inputNum, operation } = this.state\r\n        let input = 0\r\n        if ( num === '.' && !display || num === '.' && inputNum.toString().includes('.') ) {\r\n            return\r\n        }\r\n        if ( !display || inputNum === 0 ) {\r\n            input = num\r\n        } else {\r\n            input = inputNum + num\r\n        }\r\n        if ( !inputState ) {\r\n            this.setState({\r\n                display: input,\r\n                firstInput: input,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                display: firstInput + operation + input,\r\n                secondInput: input,\r\n            })\r\n        }\r\n        this.setState({\r\n            inputNum: input\r\n        })\r\n    }\r\n\r\n    doMath = (first, second, func) => {\r\n        let result = 0;\r\n        first = +first\r\n        second = +second\r\n        switch (func) {\r\n            case 'x':\r\n                result = first * second\r\n                break;\r\n            case '/':\r\n                result = first / second\r\n                break;\r\n            case '-':\r\n                result = first - second\r\n                break;\r\n            case '+':\r\n                result = first + second\r\n            break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    inputFunc = ( func ) => {\r\n        if ( func === '+/-' || func === '%' ) {\r\n            return\r\n        }\r\n        let { display, firstInput, secondInput, operation, inputState, inputNum } = this.state\r\n        let result = 0;\r\n        let operations = ['x', '/', '+', '-']\r\n        if ( func === '/' || func === 'x' || func === '+' || func === '-' ) {\r\n                if ( inputState && secondInput  ) {\r\n                    result = this.doMath(firstInput, secondInput, operation) \r\n                    this.setState({\r\n                        display: result + func,\r\n                        firstInput: result,\r\n                        secondaryDisplay: display + '=',\r\n                        inputNum: 0,\r\n                        operation: func,\r\n                        secondInput: 0\r\n                    })\r\n                } else {\r\n                    this.setState({ \r\n                        operation: func,\r\n                        display: firstInput + func,\r\n                        inputState: true,\r\n                        inputNum: 0\r\n                    })\r\n                }\r\n        }\r\n        switch ( func ) {\r\n            case 'C': \r\n            if ( inputState ) {\r\n                secondInput = secondInput.toString().slice(0, -1)\r\n                if ( secondInput === '' ) {\r\n                    this.setState({\r\n                        inputState: false,\r\n                    })\r\n                }\r\n                this.setState({\r\n                    secondInput: secondInput\r\n                })\r\n            } else if ( !inputState && operation === '' ) {\r\n                firstInput = firstInput.toString().slice(0, -1)\r\n                this.setState({\r\n                    inputNum: firstInput\r\n                })\r\n            }\r\n                display = display.toString().slice(0,-1)\r\n                if ( !this.contains(display, operations) ) {\r\n                    this.setState({\r\n                        operation: '',\r\n                        inputState: false,\r\n                    })\r\n                }\r\n                this.setState({\r\n                    display: display\r\n                })\r\n            break;\r\n            case 'AC': \r\n                this.setState({\r\n                    display: undefined,\r\n                    secondaryDisplay: undefined,\r\n                    inputNum: 0,\r\n                    firstInput: 0,\r\n                    secondInput: 0,\r\n                    operation: '',\r\n                    inputState: false\r\n                })\r\n            break;\r\n            case '=': \r\n            result = this.doMath(firstInput, secondInput, operation) \r\n            this.setState({\r\n                display: result,\r\n                firstInput: result,\r\n                secondaryDisplay: display + '=',\r\n                secondInput: 0,\r\n                inputNum: 0,\r\n                operation: '',\r\n                inputState: false\r\n            })\r\n            break;\r\n        default: break;\r\n        }\r\n    }\r\n    contains = (target, pattern) => {\r\n        var value = 0;\r\n        pattern.forEach(function(word){\r\n          value = value + target.includes(word);\r\n        });\r\n        return (value === 1)\r\n    }\r\n    render() {\r\n        const { display, secondaryDisplay } = this.state\r\n        const calcContainer = (\r\n            <div className=\"calculator-container\">\r\n                <Display\r\n                    display={display}\r\n                    secondaryDisplay={secondaryDisplay}\r\n                />\r\n                <Keypad\r\n                    inputNum={this.inputNum}\r\n                    inputFunc={this.inputFunc}\r\n                />\r\n            </div>\r\n        )\r\n    return calcContainer\r\n    }\r\n}\r\n\r\nexport default Calculator","import React from 'react'\nimport './App.css';\nimport Calculator from './components/Calculator.jsx';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n  render() {\n    const calculator = (\n         <Calculator/>\n    )\n    return calculator\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}